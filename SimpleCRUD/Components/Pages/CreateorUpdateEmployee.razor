@using SimpleCRUD.Enum
@using SimpleCRUD.Services
@using SimpleCRUD.ViewModels

@inject EmployeeService EmployeeService
@inject ISnackbar SnackBar

<EditForm Model="@model" OnValidSubmit="OnvalidSubmit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <MudGrid Class="mb-5">
                <MudItem xs="9">
                    <MudTextField Variant="Variant.Outlined"
                                  ShrinkLabel
                                  Label="Full Name"
                                  @bind-Value="model.FullName"
                                  For="@(() => model.FullName)" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Variant="Variant.Outlined"
                                  ShrinkLabel
                                  Label="Age"
                                  @bind-Value="model.Age"
                                  For="@(() => model.Age)" />
                </MudItem>
            </MudGrid>
            <MudDatePicker Class="mb-5" Variant="Variant.Outlined" Label="Date of Birth" @bind-Date="_date" />
            <MudTextField Class="mb-5" Variant="Variant.Outlined"
                          ShrinkLabel
                          Label="Department"
                          @bind-Value="model.Department"
                          For="@(() => model.Department)" />
            <MudTextField Variant="Variant.Outlined"
                          ShrinkLabel
                          Label="Phone Number"
                          @bind-Value="model.PhoneNumber"
                          For="@(() => model.PhoneNumber)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public UIActionEnum Action { get; set; } = UIActionEnum.Insert;

    [Parameter]
    public DateTime? _date { get; set; } = DateTime.Today;

    [Parameter]
    public EmployeeViewModel model { get; set; } = new EmployeeViewModel();

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private async Task OnvalidSubmit(EditContext editContext)
    {
        if(_date is not null)
        {
            model.DateOfBirth = _date.Value;
        }

        if(Action == UIActionEnum.Insert)
        {
            CreateEmloyee();
        }else if(Action == UIActionEnum.Update)
        {
            UpdateEmployee();
        }
    }
    private void CreateEmloyee()
    {
        var result = EmployeeService.CreateNewEmployee(model);
        if (result)
        {
            SnackBar.Add("Çalışan Başarıyla Eklendi!", Severity.Success);
            MudDialog.Close();
        }
        else
        {
            SnackBar.Add("Çalışan Eklenirken Hata Oluştu!", Severity.Error);
        }
    }
    private void UpdateEmployee()
    {
        var result = EmployeeService.UpdateEmployee(model);
        if (result)
        {
            SnackBar.Add("Çalışan Bilgisi Başarıyla Güncellendi!", Severity.Success);
            MudDialog.Close();
        }
        else
        {
            SnackBar.Add("Güncelleme Sırasında Hata Oluştu!", Severity.Error);
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
