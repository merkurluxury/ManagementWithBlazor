@page "/"

@using System.Threading
@using ClosedXML.Excel
@using SimpleCRUD.Enum
@using SimpleCRUD.ViewModels
@using SimpleCRUD.Services
@inject EmployeeService EmployeeService
@inject IDialogService DialogService
@inject ISnackbar SnackBar
@inject IJSRuntime JS


@rendermode InteractiveServer

<style>
    .department-cell {
        border: 2px solid grey;
        padding: 4px;
        border-radius: 8px;
    }
</style>

<PageTitle>Home</PageTitle>

<h2 class="text-center">
    Çalışan Yönetim Paneli
</h2>

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">Toplam Çalışan Sayısı: @EmployeeViewModel.Count()</MudText>
    </MudCardContent>
</MudCard>

<MudDataGrid @ref="dataGrid" T="EmployeeViewModel" MultiSelection="true" Items="@EmployeeViewModel"
             SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked"
             SelectedItemsChanged="@SelectedItemsChanged"
             Dense="true" Hover="true" Striped="true" Bordered="true">
    <ToolBarContent>
        <MudButton Class="me-2"
                   @onclick="CreateNewUser"
                   StartIcon="@Icons.Material.Filled.PersonAddAlt1"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Yeni Çalışan Ekle
        </MudButton>
        <MudFileUpload Class="me-2" T="IBrowserFile" @ref="excelUpload" FilesChanged="UploadFile">
            <ActivatorContent>
                <MudButton Disabled="@importing" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Custom.FileFormats.FileExcel">
                    @if (importing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
                        <MudText Class="ms-2">Processing..</MudText>
                    }
                    else
                    {
                        <MudText>Excel Yükle</MudText>
                    }
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        <MudButton Disabled="@exporting" @onclick="ExportToExcel" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Custom.FileFormats.FileExcel" Class="me-2">
            @if (exporting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
                <MudText Class="ms-2">Processing..</MudText>
            }
            else
            {
                <MudText>Excel Dışa Aktar</MudText>
            }
        </MudButton>

        <MudButton Disabled="@exportingPdf" @onclick="ExportToPdf" Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Custom.FileFormats.FilePdf">
            @if (exportingPdf)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
                <MudText Class="ms-2">Processing..</MudText>
            }
            else
            {
                <MudText>PDF Dışa Aktar</MudText>
            }
        </MudButton>

        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="EmployeeViewModel" />
        <PropertyColumn Property="x => x.EmployeeIdView" Title="Employee Id" />
        <PropertyColumn Property="x => x.FullName" Title="Full Name" />
        <TemplateColumn Title="Departman">
            <CellTemplate>
                <div class="department-cell">@context.Item.Department</div>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.DateOfBirth" Format="dd MMM yyyy" Title="Doğum Tarihi" />
        <PropertyColumn Property="x => x.Age" Title="Yaş" />
        <PropertyColumn Property="x => x.PhoneNumber" Title="GSM" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton Class="me-2"
                           Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Edit"
                           Color="@Color.Warning"
                           OnClick="@(() => this.UpdateEmployee(context))">
                    Güncelle
                </MudButton>
                <MudButton Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Color="@Color.Error"
                           OnClick="@(() => this.RemoveEmployee(context))">
                    Sil
                </MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeViewModel" />
    </PagerContent>
</MudDataGrid>



<MudExpansionPanels Style="flex:1">
    <div class="mt-4">
        <MudText Typo="Typo.h6">Departmanlara Göre Çalışan Dağılımı</MudText>
        <div class="d-flex justify-space-around">
            @foreach (var department in DepartmentCounts)
            {
                <div class="mx-2" style="width: @(department.Value * 100 / EmployeeViewModel.Count())%">
                    <MudProgressLinear Color="@GetDepartmentColor(department.Key)" Size="Size.Small" Value="@(department.Value * 5 / EmployeeViewModel.Count())" Class="my-18">
                        <MudText Typo="Typo.caption" Align="Align.Left">
                            <div>@department.Key</div>
                            <div>(@department.Value)</div>
                        </MudText>
                    </MudProgressLinear>
                </div>
            }
        </div>
    </div>
</MudExpansionPanels>

@code {
    private IEnumerable<EmployeeViewModel> EmployeeViewModel = new List<EmployeeViewModel>();
    private Dictionary<string, int> DepartmentCounts = new Dictionary<string, int>();
    MudDataGrid<EmployeeViewModel> dataGrid;
    MudFileUpload<IBrowserFile> excelUpload;
    private string _searchString;
    bool importing = false;
    bool exporting = false;
    bool exportingPdf = false;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private Func<EmployeeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FullName.Length;
        else
            return x.FullName;
    };
    private Func<EmployeeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        EmployeeViewModel = await EmployeeService.GetAllEmployees();
        UpdateDepartmentCounts();
    }

    private void UpdateDepartmentCounts()
    {
        DepartmentCounts = EmployeeViewModel
            .GroupBy(e => e.Department)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private Color GetDepartmentColor(string department)
    {
        return department switch
        {
            "IT" => Color.Primary,
            "HR" => Color.Secondary,
            "Sales" => Color.Tertiary,
            _ => Color.Default
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", @"
                window.exportTableToPdf = function () {
                    const table = document.querySelector('.mud-table');
                    if (!table) return;

                    const headers = [];
                    const rows = [];

                    // Get headers
                    table.querySelectorAll('thead th').forEach(header => {
                        if (header.textContent.trim() !== '' &&
                            header.textContent.trim() !== 'Actions' &&
                            !header.querySelector('input[type=""checkbox""]')) {
                            headers.push(header.textContent.trim());
                        }
                    });

                    // Get rows
                    table.querySelectorAll('tbody tr').forEach(row => {
                        const rowData = [];
                        row.querySelectorAll('td').forEach((cell, index) => {
                            // Skip checkbox column and actions column
                            if (index !== 0 && !cell.querySelector('.d-flex.justify-end')) {
                                rowData.push(cell.textContent.trim());
                            }
                        });
                        if (rowData.length > 0) {
                            rows.push(rowData);
                        }
                    });

                    // Create PDF
                    const doc = new window.jspdf.jsPDF();
                    doc.setFontSize(18);
                    doc.text('Çalışan Listesi', 14, 22);
                    doc.setFontSize(11);
                    doc.autoTable({
                        head: [headers],
                        body: rows,
                        startY: 30,
                        theme: 'grid',
                        styles: {
                            fontSize: 8,
                            cellPadding: 3
                        },
                        headStyles: {
                            fillColor: [66, 66, 66]
                        }
                    });

                    doc.save('calisanlar.pdf');
                    return true;
                }");
        }
    }

    void RowClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<EmployeeViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task CreateNewUser()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<CreateorUpdateEmployee>
        {
            {x=> x.Action, UIActionEnum.Insert},
            {x=>x.model, new EmployeeViewModel() }
        };

        var dialog = await DialogService.ShowAsync<CreateorUpdateEmployee>("Add Employee", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }

    private async Task UpdateEmployee(CellContext<EmployeeViewModel> employee)
    {
        var employeeView = EmployeeService.FindEmployee(employee.Item.EmployeeId);
        if (employeeView is null)
        {
            SnackBar.Add("Something wrong when try find the employee!", Severity.Error);
            return;
        }

        var options = new DialogOptions { MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<CreateorUpdateEmployee>
        {
            {x=> x.Action, UIActionEnum.Update},
            {x=>x.model, employeeView },
            {x=>x._date, employeeView.DateOfBirth }
        };

        var dialog = await DialogService.ShowAsync<CreateorUpdateEmployee>("Update Employee", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }

    private async Task RemoveEmployee(CellContext<EmployeeViewModel> employee)
    {
        var dialog = await DialogService.ShowAsync<RemoveConfirmationDialog>("Remove: " + employee.Item.FullName);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var confirmed = (bool)(result.Data ?? false);
            if (confirmed)
            {
                var deleteResult = EmployeeService.DeleteEmployee(employee.Item.EmployeeId);
                if (deleteResult)
                {
                    SnackBar.Add("Successfully remove the employee!", Severity.Success);
                    await dataGrid.ReloadServerData();
                }
                else
                {
                    SnackBar.Add("Failed remove the employee!", Severity.Error);
                }
            }
        }
    }


    private async Task UploadFile(IBrowserFile file)
    {
        if (file is null) return;
        importing = true;
        try
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            stream.Position = 0;

            using var workbook = new XLWorkbook(stream);
            var worksheet = workbook.Worksheets.First();

            var rows = worksheet.RowsUsed().Skip(1);

            List<EmployeeViewModel> employees = new List<EmployeeViewModel>();
            foreach (var row in rows)
            {
                EmployeeViewModel employeeViewModel = new EmployeeViewModel
                    {
                        FullName = row.Cell(1).Value.ToString(),
                        Department = row.Cell(2).Value.ToString(),
                        DateOfBirth = row.Cell(3).Value,
                        Age = int.Parse(row.Cell(4).Value.ToString()),
                        PhoneNumber = row.Cell(5).Value.ToString()
                    };
                employees.Add(employeeViewModel);
            }

            var parameters = new DialogParameters<ImportDialog>
            {
                { x => x.employees, employees}
            };

            var options = new DialogOptions() { MaxWidth = MaxWidth.Large };

            var dialog = await DialogService.ShowAsync<ImportDialog>("Ready to import", parameters, options);
            var result = await dialog.Result;

            if (result != null && !result.Canceled)
            {
                await dataGrid.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            SnackBar.Add("Import failed!", Severity.Error);
        }
        await excelUpload.ClearAsync();
        importing = false;
    }

    private async Task ExportToExcel()
    {
        exporting = true;
        var excelBytes = await EmployeeService.ExporttoExcel();
        await JS.InvokeVoidAsync("downloadFileFromBytes", "List employess.xlsx", excelBytes);
        exporting = false;
    }

    private async Task ExportToPdf()
    {
        try
        {
            exportingPdf = true;
            await JS.InvokeVoidAsync("exportTableToPdf");
        }
        catch (Exception ex)
        {
            SnackBar.Add("PDF dışa aktarma işlemi başarısız!", Severity.Error);
        }
        finally
        {
            exportingPdf = false;
        }
    }
}